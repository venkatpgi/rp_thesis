ci(roc2)
# Of the curve
sens.ci <- ci.se(roc1, specificities=seq(0, 100, 5))
plot(sens.ci, type="shape", col="lightgrey")
plot(sens.ci, type="bars")
# need to re-add roc2 over the shape
plot(roc2, add=TRUE)
# CI of thresholds
plot(ci.thresholds(roc2))
#comparisons
# Test on the whole AUC
roc.test(roc1, roc2, reuse.auc=FALSE)
# Test on a portion of the whole AUC
roc.test(roc1, roc2, reuse.auc=FALSE, partial.auc=c(100, 90),
partial.auc.focus="se", partial.auc.correct=TRUE)
# With modified bootstrap parameters
roc.test(roc1, roc2, reuse.auc=FALSE, partial.auc=c(100, 90),
partial.auc.correct=TRUE, boot.n=1000, boot.stratified=FALSE)
library(pROC)
roc_snap_0 <- roc(snap$outcome_d14,snap$snap_0,smoothed=TRUE,ci=TRUE,ci.alpha=0.9,stratified=FALSE,plot=TRUE,auc.polygon=TRUE,max.auc.polygon=TRUE,grid=TRUE,print.auc=TRUE,show.thres=TRUE)
sens.ci_1 <- ci.se(roc_snap_0)
plot(sens.ci_1,type="shape",col="lightgrey")
plot(sens.ci_1,type="bars")
roc_snap_0_24 <- roc(snap$outcome_d14,snap$snap_0_24,smoothed=TRUE,ci=TRUE,ci.alpha=0.9,stratified=FALSE,plot=TRUE,auc.polygon=TRUE,max.auc.polygon=TRUE,grid=TRUE,print.auc=TRUE,show.thres=TRUE)
sens.ci_2 <- ci.se(roc_snap_0_24)
plot(sens.ci_2,type="shape",col="lightgrey")
plot(sens.ci_2,type="bars")
roc_snap_0_48 <- roc(snap$outcome_d14,snap$snap_0_48,smoothed=TRUE,ci=TRUE,ci.alpha=0.9,stratified=FALSE,plot=TRUE,auc.polygon=TRUE,max.auc.polygon=TRUE,grid=TRUE,print.auc=TRUE,show.thres=TRUE)
sens.ci_3 <- ci.se(roc_snap_0_48)
plot(sens.ci_3,type="shape",col="lightgrey")
plot(sens.ci_3,type="bars")
roc_snap_0_72 <- roc(snap$outcome_d14,snap$snap_0_72,smoothed=TRUE,ci=TRUE,ci.alpha=0.9,stratified=FALSE,plot=TRUE,auc.polygon=TRUE,max.auc.polygon=TRUE,grid=TRUE,print.auc=TRUE,show.thres=TRUE)
sens.ci_4 <- ci.se(roc_snap_0_72)
plot(sens.ci_4,type="shape",col="lightgrey")
plot(sens.ci_4,type="bars")
roc.test(roc_snap_0,roc_snap_0_24,method="bootstrap",boot.n=1000)
roc.test(roc_snap_0,roc_snap_0_48,method="bootstrap",boot.n=1000)
roc.test(roc_snap_0,roc_snap_0_72,method="bootstrap",boot.n=1000)
#multiple ROC curves in a single plot
library(pROC)
roc.list <- roc(outcome_d14 ~ snap_0 + snap_0_24 + snap_0_48 + snap_0_72, data = snap)
ci.list <- lapply(roc.list, ci.se, specificities = seq(0, 1, l = 50))
dat.ci.list <- lapply(ci.list, function(ciobj)
data.frame(x = as.numeric(rownames(ciobj)),
lower = ciobj[, 1],
upper = ciobj[, 3]))
p <- ggroc(roc.list,aes="linetype",color="black") + theme_minimal() + geom_abline(slope=1, intercept = 1, linetype = "dashed", alpha=0.5, color = "black") + coord_equal()
for(i in 1:3) {
p <- p + geom_ribbon(
data = dat.ci.list[[i]],
aes(x = x, ymin = lower, ymax = upper),alpha=0.2,inherit.aes = F)
}
p
library(ROCit)
roc7_empirical <- rocit(score=snap$snap_0,class=snap$outcome_d14)
class(roc7_empirical)
summary(roc7_empirical)
plot(roc7_empirical,values = F)
ciAUC(roc7_empirical)
#multiple ROC curves in a single plot
library(pROC)
roc.list <- roc(outcome_d14 ~ snap_0 + snap_0_24 + snap_0_48 + snap_0_72, data = snap)
ci.list <- lapply(roc.list, ci.se, specificities = seq(0, 1, l = 50))
dat.ci.list <- lapply(ci.list, function(ciobj)
data.frame(x = as.numeric(rownames(ciobj)),
lower = ciobj[, 1],
upper = ciobj[, 3]))
p <- ggroc(roc.list,aes="linetype",color="black") + theme_minimal() + geom_abline(slope=1, intercept = 1, linetype = "dashed", alpha=0.5, color = "black") + coord_equal()
for(i in 1:3) {
p <- p + geom_ribbon(
data = dat.ci.list[[i]],
aes(x = x, ymin = lower, ymax = upper),alpha=0.2,inherit.aes = F)
}
p
#multiple ROC curves in a single plot - simple type with less arguments
roc_list <- roc(outcome_d14~snap_0 + snap_0_24 + snap_0_48 + snap_0_72, data=snap)
roc_multi1 <- ggroc(roc_list,aes = "linetype",color="black") + theme_minimal() + ggtitle("ROC curve of SNAP and delta-SNAP and death by 14 days") + geom_segment(aes(x=1,xend=0,y=0,yend=1),color="darkgrey",linetype="dashed") + xlab("specificity") +ylab("sensitivity")
roc_multi1
#multiple ROC curves in a single plot - simple type with less arguments with little different ggplot functions
roc_list <- roc(outcome_d14~snap_0 + snap_0_24 + snap_0_48 + snap_0_72, data=snap)
roc_multi1 <- ggroc(roc_list,aes = "linetype",color="black") + theme_minimal() + ggtitle("ROC curve of SNAP and delta-SNAP and death by 14 days") + geom_abline(slope=1,intercept=1,linetype="dashed",color="darkgrey") + xlab("specificity") +ylab("sensitivity")
roc_multi1
#create a new data set from snap and baseline_data datasets and convert that to a long data suitable for tidyanalysis and lmer analysis
library(dplyr)
snap_mixed <- snap %>% select(name,outcome_d14,snap_0,snap_24,snap_48,snap_72,snap_0_72,snap_0_48,snap_0_24) #select variables from snap data
baseline_skimmed <- baseline_data %>% select(gest,bwt,wga,ag_5mt,resp,vent) #select variables from baseline_data
snap_mixedmod <- data.frame(baseline_skimmed,snap_mixed) #combine them into a single data frame
snap_mixedmod <- snap_mixedmod %>% select(name,outcome_d14,everything()) #reorder the columns
snap_mixedmod_long <- snap_mixedmod %>% pivot_longer(cols=snap_0:snap_72,names_to="snap_serial",values_to="score")
head(snap_mixedmod_long,6)
score <- snap_mixedmod_long$score
group <- snap_mixedmod_long$outcome_d14
snap_serial <- snap_mixedmod_long$snap_serial
subject <- snap_mixedmod_long$name
library(lme4)
library(car)
snap_m1 <- lmer(score~snap_serial*group + (1|subject),contrasts=list(snap_serial="contr.sum", group="contr.sum"))
summary(snap_m1)
Anova(snap_m1,test="F",type="III")
library(apaTables)
apa.2way.table(outcome_d14,snap_serial,score,data=snap_mixedmod_long,show.marginal.means = T)
snap_mixedmod_long %>% mutate(snap_serial=factor(snap_serial)) %>% ggplot(aes(snap_serial,score))+
geom_violin()+
geom_jitter(alpha=0.5,width=0.1,height=0)
#main effect of time
snap_mixedmod_long %>% ggplot(aes(snap_serial,score))+
stat_summary(fun.data = mean_cl_boot,geom="ribbon",alpha=0.3)+
stat_summary(fun.y=mean,geom="line")
#main effect of time
snap_mixedmod_long %>% ggplot(aes(snap_serial,score))+
stat_summary(fun.data = mean_cl_boot,geom="ribbon",alpha=0.3)+
stat_summary(fun=mean,geom="line")
#main effect of time
snap_mixedmod_long %>% ggplot(aes(snap_serial,score))+
stat_summary(fun=mean,geom="line")
#main effect of time
snap_mixedmod %>% ggplot(aes(snap_serial,score))+
stat_summary(fun=mean,geom="line")
#main effect of time
snap_mixedmod_long %>% ggplot(aes(snap_serial,score))+
stat_summary(fun=mean,geom="line")
#main effect of time
snap_mixedmod_long %>% ggplot(aes(snap_serial,score))+
stat_summary(fun.data = mean_cl_boot,geom="ribbon",alpha=0.3)+
stat_summary(fun.y=mean,geom="line")
#main effect of time
snap_mixedmod_long %>% mutate(snap_serial=factor(snap_serial))+
ggplot(aes(snap_serial,score))+
stat_summary(fun.data = mean_cl_boot,geom="ribbon",alpha=0.3)+
stat_summary(fun.y=mean,geom="line")
#main effect of time
snap_mixedmod_long %>% mutate(snap_serial=factor(snap_serial))+
ggplot(aes(snap_serial,score))+
stat_summary(fun.data = mean_cl_boot,geom="ribbon",alpha=0.3)+
stat_summary(fun.y=mean,geom="line")
#main effect of time
snap_mixedmod_long %>% mutate(snap_serial=factor(snap_serial)) %>%
ggplot(aes(snap_serial,score))+
stat_summary(fun.data = mean_cl_boot,geom="ribbon",alpha=0.3)+
stat_summary(fun.y=mean,geom="line")
#main effect of time
snap_mixedmod_long %>%
ggplot(aes(snap_serial,score,group=1))+
stat_summary(fun.data = mean_cl_boot,geom="ribbon",alpha=0.3)+
stat_summary(fun.y=mean,geom="line")
#group x time interaction
snap_mixedmod_long %>% ggplot(aes(snap_serial,score,color=outcome_d14,fill=outcome_d14))+
stat_summary(fun.data = mean_se,geom="ribbon",alpha=0.1)+
stat_summary(fun.y=mean,geom="line")
#group x time interaction
snap_mixedmod_long %>% ggplot(aes(snap_serial,score,color=outcome_d14,fill=outcome_d14,group=1))+
stat_summary(fun.data = mean_se,geom="ribbon",alpha=0.1)+
stat_summary(fun.y=mean,geom="line")
#group x time interaction
snap_mixedmod_long %>% ggplot(aes(snap_serial,score,color=outcome_d14,fill=outcome_d14,group=2))+
stat_summary(fun.data = mean_se,geom="ribbon",alpha=0.1)+
stat_summary(fun.y=mean,geom="line")
#group x time interaction
snap_mixedmod_long %>% ggplot(aes(snap_serial,score,color=outcome_d14,fill=outcome_d14,group=3))+
stat_summary(fun.data = mean_se,geom="ribbon",alpha=0.1)+
stat_summary(fun.y=mean,geom="line")
#group x time interaction
snap_mixedmod_long %>% ggplot(aes(snap_serial,score,color=outcome_d14,fill=outcome_d14,group=))+
stat_summary(fun.data = mean_se,geom="ribbon",alpha=0.1)+
stat_summary(fun.y=mean,geom="line")
#group x time interaction
snap_mixedmod_long %>% ggplot(aes(snap_serial,score,group=1,color=outcome_d14,fill=outcome_d14))+
stat_summary(fun.data = mean_se,geom="ribbon",alpha=0.1)+
stat_summary(fun.y=mean,geom="line")
#group x time interaction
snap_mixedmod_long %>% ggplot(aes(snap_serial,score,color=outcome_d14,fill=outcome_d14))+
stat_summary(fun.data = mean_se,geom="ribbon",alpha=0.1,group=1)+
stat_summary(fun.y=mean,geom="line")
#group x time interaction
snap_mixedmod_long %>% ggplot(aes(snap_serial,score,color=outcome_d14,fill=outcome_d14),group=1)+
stat_summary(fun.data = mean_se,geom="ribbon",alpha=0.1)+
stat_summary(fun.y=mean,geom="line")
#group x time interaction
snap_mixedmod_long %>% ggplot(aes(snap_serial,score,color=outcome_d14,fill=outcome_d14,group=outcome_d14))+
stat_summary(fun.data = mean_se,geom="ribbon",alpha=0.1)+
stat_summary(fun.y=mean,geom="line")
#group x time interaction
snap_mixedmod_long %>% ggplot(aes(snap_serial,score,group=outcome_d14))+
stat_summary(fun.data = mean_se,geom="ribbon",alpha=0.1)+
stat_summary(fun.y=mean,geom="line")
#group x time interaction
snap_mixedmod_long %>% ggplot(aes(snap_serial,score,color=outcome_d14,group=outcome_d14))+
stat_summary(fun.data = mean_se,geom="ribbon",alpha=0.1)+
stat_summary(fun.y=mean,geom="line")
#group x time interaction
snap_mixedmod_long %>% ggplot(aes(snap_serial,score,fill=outcome_d14,group=outcome_d14))+
stat_summary(fun.data = mean_se,geom="ribbon",alpha=0.1)+
stat_summary(fun.y=mean,geom="line")
#group x time interaction
snap_mixedmod_long %>% ggplot(aes(snap_serial,score,fill=outcome_d14,group=outcome_d14))+
stat_summary(fun.data = mean_se,geom="ribbon",alpha=0.2)+
stat_summary(fun.y=mean,geom="line")
#group x time interaction
snap_mixedmod_long %>% ggplot(aes(snap_serial,score,fill=outcome_d14,group=outcome_d14))+
stat_summary(fun.data = mean_se,geom="ribbon",alpha=0.2,color="lightgrey")+
stat_summary(fun.y=mean,geom="line")
#linear trends
snap_mixedmod_long %>% ggplot(aes(snap_serial,score,fill=outcome_d14,group=outcome_d14))+
geom_smooth(method = lm,alpha=0.2)
#linear trends
snap_mixedmod_long %>% ggplot(aes(snap_serial,score,fill=outcome_d14,group=outcome_d14))+
facet_wrap(~wga)+
geom_smooth(method = lm,alpha=0.2)
#linear trends
snap_mixedmod_long %>% ggplot(aes(snap_serial,score,fill=outcome_d14,group=outcome_d14))+
#facet_wrap(~wga) +
geom_smooth(method = lm,alpha=0.2)
#quadratic trends
snap_mixedmod_long %>% ggplot(aes(snap_serial,score,group=outcome_d14))+
geom_smooth(method=lm,alpha=0.2,formula=y~x+I(x^2))
#groupXtimeXwga interaction
snap_mixedmod_long %>% ggplot(aes(snap_serial,score,group=outcome_d14))+
facet_wrap(~wga) +
stat_summary(fun.data = mean_se,alpha=1,position=position_dodge(width=0.5)) + stat_summary(fun=mean,geom="line",position=position_dodge(width=0.5))
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(methods)
ggplot(snap_mixedmod_long,aes(snap_serial,score,group=1))+
geom_line() +
stat_smooth(aes(group=1)) +
stat_summary(aes(group=1),geom="point",fun.y=mean,shape=1,size=2)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(here)
library(plyr)
library(tidyverse)
snap <- readr::read_csv("../data/snap_data.csv")
sepsis_data <- readr::read_csv("../data/sepsis_data.csv")
baseline_data <- readr::read_csv("../data/baseline_data.csv")
#convert the wide data of snap to long data snap to make the data tidy data using the gather function of tidyverse::tidyr package
library(tidyr)
snap_long <- snap %>% gather(snap_rm,snap_value,snap_0:snap_72,factor_key=TRUE)
snap_long <- snap_long[order(snap_long$name,snap_long$snap_rm),]
snap_long
#another long data set without the missing data
snap_long_na_rm <- snap %>% gather(snap_rm,snap_value,snap_0:snap_72,factor_key=TRUE,na.rm=TRUE)
snap_long_na_rm <- snap_long_na_rm[order(snap_long_na_rm$name,snap_long_na_rm$snap_rm),]
snap_long_na_rm
library(dplyr)
colnames(sepsis_data)
for(i in colnames(sepsis_data)){
print(paste(i,"",typeof(sepsis_data[[i]])))
}
dbl_names_sepsis <- sepsis_data %>% select_if(is.double) %>% colnames()
dbl_names_sepsis
dbl_to_fact_names_sepsis <- c("outcome_d14","sepsis_type","lethargy","asp","temp","resp_dist","apnea","seiz","shock","sclerema","bleed","abd_dist","met_acid","tachy","cult_pos","org_type","sepsis_screen","cxr_abn","cvs_involv","cvs_instab","cvs_support","met_acid_refr","rs_involv","hypox","hypercapnia","coag_abn","neutro_low")
sepsis_data[,dbl_to_fact_names_sepsis] <- lapply(sepsis_data[,dbl_to_fact_names_sepsis],factor)
for(i in colnames(sepsis_data)){
print(paste(i,"",class(sepsis_data[[i]])))
} #to check the change of selected doubles to factors (looped through columns)
dbl_names_snap <- snap %>% select_if(is.double) %>% colnames()
dbl_names_snap
dbl_to_fact_names_snap <- c("outcome_d14","seiz_0","seiz_24","seiz_48","seiz_72","od_enrol","od_d7","cvs_enrol","cvs_d7","rs_enrol","rs_d7","hemat_enrol","hemat_d7","renal_enrol","renal_d7","hepat_enrol","hepat_d7","cvs_d14","rs_d14","hemat_d14","renal_d14","hepat_d14")
snap[,dbl_to_fact_names_snap] <- lapply(snap[,dbl_to_fact_names_snap],factor)
for(i in colnames(snap)){
print(paste(i,"",class(snap[[i]])))
} #to check the change of selected doubles to factors (looped through columns)
dbl_names_baseline <- baseline_data %>% select_if(is.double) %>% colnames()
dbl_names_baseline
dbl_to_fact_names_baseline <- c("outcome_d14","outcome_d7","comp_outcome_d7","od_d7","outcome_d14_1","comp_outcome_d14","od_d14","outcome_final","gender","concep","booked","supvd","mat_drug","mat_ht","mat_dm","mat_pih","mat_gdm","mat_hd","lpv","ans","chorio","ipa","gest_categ","bwt_categ","mod","wga","birth_trauma","resp","surf","vent","oxygen","pda","chd","ivh","meningitis")
baseline_data[,dbl_to_fact_names_baseline] <- lapply(baseline_data[,dbl_to_fact_names_baseline],factor)
for(i in colnames(baseline_data)){
print(paste(i,"",class(baseline_data[[i]])))
} #to check the change of selected doubles to factors (looped through columns)
#have to recode outcome_d14 variable in snap data
library(plyr)
snap$outcome_d14 <- revalue(snap$outcome_d14,c("0"="died","1"="survived"))
snap$outcome_d14 <- revalue(snap$outcome_d14,c("died"="1","survived"="0"))
table(snap$outcome_d14)
library(pROC)
roc1 <- roc(snap$outcome_d14, snap$snap_0, percent=TRUE,
# arguments for auc
partial.auc=c(100, 90), partial.auc.correct=TRUE,
partial.auc.focus="sens",
# arguments for ci
ci=TRUE, boot.n=100, ci.alpha=0.9, stratified=FALSE,
# arguments for plot
plot=TRUE, auc.polygon=TRUE, max.auc.polygon=TRUE, grid=TRUE,
print.auc=TRUE, show.thres=TRUE)
# Add to an existing plot. Beware of 'percent' specification!
roc2 <- roc(snap$outcome_d14,snap$snap_0_72,
plot=TRUE, add=TRUE, percent=roc1$percent)
#coordinates of the curve
coords(roc1, "best", ret=c("threshold", "specificity", "1-npv"))
coords(roc2, "local maximas", ret=c("threshold", "sens", "spec", "ppv", "npv"))
#confidence intervals
# Of the AUC
ci(roc2)
# Of the curve
sens.ci <- ci.se(roc1, specificities=seq(0, 100, 5))
plot(sens.ci, type="shape", col="lightgrey")
plot(sens.ci, type="bars")
# need to re-add roc2 over the shape
plot(roc2, add=TRUE)
# CI of thresholds
plot(ci.thresholds(roc2))
#comparisons
# Test on the whole AUC
roc.test(roc1, roc2, reuse.auc=FALSE)
# Test on a portion of the whole AUC
roc.test(roc1, roc2, reuse.auc=FALSE, partial.auc=c(100, 90),
partial.auc.focus="se", partial.auc.correct=TRUE)
# With modified bootstrap parameters
roc.test(roc1, roc2, reuse.auc=FALSE, partial.auc=c(100, 90),
partial.auc.correct=TRUE, boot.n=1000, boot.stratified=FALSE)
library(pROC)
roc_snap_0 <- roc(snap$outcome_d14,snap$snap_0,smoothed=TRUE,ci=TRUE,ci.alpha=0.9,stratified=FALSE,plot=TRUE,auc.polygon=TRUE,max.auc.polygon=TRUE,grid=TRUE,print.auc=TRUE,show.thres=TRUE)
sens.ci_1 <- ci.se(roc_snap_0)
plot(sens.ci_1,type="shape",col="lightgrey")
plot(sens.ci_1,type="bars")
roc_snap_0_24 <- roc(snap$outcome_d14,snap$snap_0_24,smoothed=TRUE,ci=TRUE,ci.alpha=0.9,stratified=FALSE,plot=TRUE,auc.polygon=TRUE,max.auc.polygon=TRUE,grid=TRUE,print.auc=TRUE,show.thres=TRUE)
sens.ci_2 <- ci.se(roc_snap_0_24)
plot(sens.ci_2,type="shape",col="lightgrey")
plot(sens.ci_2,type="bars")
roc_snap_0_48 <- roc(snap$outcome_d14,snap$snap_0_48,smoothed=TRUE,ci=TRUE,ci.alpha=0.9,stratified=FALSE,plot=TRUE,auc.polygon=TRUE,max.auc.polygon=TRUE,grid=TRUE,print.auc=TRUE,show.thres=TRUE)
sens.ci_3 <- ci.se(roc_snap_0_48)
plot(sens.ci_3,type="shape",col="lightgrey")
plot(sens.ci_3,type="bars")
roc_snap_0_72 <- roc(snap$outcome_d14,snap$snap_0_72,smoothed=TRUE,ci=TRUE,ci.alpha=0.9,stratified=FALSE,plot=TRUE,auc.polygon=TRUE,max.auc.polygon=TRUE,grid=TRUE,print.auc=TRUE,show.thres=TRUE)
sens.ci_4 <- ci.se(roc_snap_0_72)
plot(sens.ci_4,type="shape",col="lightgrey")
plot(sens.ci_4,type="bars")
roc.test(roc_snap_0,roc_snap_0_24,method="bootstrap",boot.n=1000)
roc.test(roc_snap_0,roc_snap_0_48,method="bootstrap",boot.n=1000)
roc.test(roc_snap_0,roc_snap_0_72,method="bootstrap",boot.n=1000)
#multiple ROC curves in a single plot
library(pROC)
roc.list <- roc(outcome_d14 ~ snap_0 + snap_0_24 + snap_0_48 + snap_0_72, data = snap)
ci.list <- lapply(roc.list, ci.se, specificities = seq(0, 1, l = 50))
dat.ci.list <- lapply(ci.list, function(ciobj)
data.frame(x = as.numeric(rownames(ciobj)),
lower = ciobj[, 1],
upper = ciobj[, 3]))
p <- ggroc(roc.list,aes="linetype",color="black") + theme_minimal() + geom_abline(slope=1, intercept = 1, linetype = "dashed", alpha=0.5, color = "black") + coord_equal()
for(i in 1:3) {
p <- p + geom_ribbon(
data = dat.ci.list[[i]],
aes(x = x, ymin = lower, ymax = upper),alpha=0.2,inherit.aes = F)
}
p
library(ROCit)
roc7_empirical <- rocit(score=snap$snap_0,class=snap$outcome_d14)
class(roc7_empirical)
summary(roc7_empirical)
plot(roc7_empirical,values = F)
ciAUC(roc7_empirical)
#multiple ROC curves in a single plot
library(pROC)
roc.list <- roc(outcome_d14 ~ snap_0 + snap_0_24 + snap_0_48 + snap_0_72, data = snap)
ci.list <- lapply(roc.list, ci.se, specificities = seq(0, 1, l = 50))
dat.ci.list <- lapply(ci.list, function(ciobj)
data.frame(x = as.numeric(rownames(ciobj)),
lower = ciobj[, 1],
upper = ciobj[, 3]))
p <- ggroc(roc.list,aes="linetype",color="black") + theme_minimal() + geom_abline(slope=1, intercept = 1, linetype = "dashed", alpha=0.5, color = "black") + coord_equal()
for(i in 1:3) {
p <- p + geom_ribbon(
data = dat.ci.list[[i]],
aes(x = x, ymin = lower, ymax = upper),alpha=0.2,inherit.aes = F)
}
p
#multiple ROC curves in a single plot - simple type with less arguments
roc_list <- roc(outcome_d14~snap_0 + snap_0_24 + snap_0_48 + snap_0_72, data=snap)
roc_multi1 <- ggroc(roc_list,aes = "linetype",color="black") + theme_minimal() + ggtitle("ROC curve of SNAP and delta-SNAP and death by 14 days") + geom_segment(aes(x=1,xend=0,y=0,yend=1),color="darkgrey",linetype="dashed") + xlab("specificity") +ylab("sensitivity")
roc_multi1
#multiple ROC curves in a single plot - simple type with less arguments with little different ggplot functions
roc_list <- roc(outcome_d14~snap_0 + snap_0_24 + snap_0_48 + snap_0_72, data=snap)
roc_multi1 <- ggroc(roc_list,aes = "linetype",color="black") + theme_minimal() + ggtitle("ROC curve of SNAP and delta-SNAP and death by 14 days") + geom_abline(slope=1,intercept=1,linetype="dashed",color="darkgrey") + xlab("specificity") +ylab("sensitivity")
roc_multi1
#create a new data set from snap and baseline_data datasets and convert that to a long data suitable for tidyanalysis and lmer analysis
library(dplyr)
snap_mixed <- snap %>% select(name,outcome_d14,snap_0,snap_24,snap_48,snap_72,snap_0_72,snap_0_48,snap_0_24) #select variables from snap data
baseline_skimmed <- baseline_data %>% select(gest,bwt,wga,ag_5mt,resp,vent) #select variables from baseline_data
snap_mixedmod <- data.frame(baseline_skimmed,snap_mixed) #combine them into a single data frame
snap_mixedmod <- snap_mixedmod %>% select(name,outcome_d14,everything()) #reorder the columns
snap_mixedmod_long <- snap_mixedmod %>% pivot_longer(cols=snap_0:snap_72,names_to="snap_serial",values_to="score")
head(snap_mixedmod_long,6)
score <- snap_mixedmod_long$score
group <- snap_mixedmod_long$outcome_d14
snap_serial <- snap_mixedmod_long$snap_serial
subject <- snap_mixedmod_long$name
library(lme4)
library(car)
snap_m1 <- lmer(score~snap_serial*group + (1|subject),contrasts=list(snap_serial="contr.sum", group="contr.sum"))
summary(snap_m1)
Anova(snap_m1,test="F",type="III")
library(apaTables)
apa.2way.table(outcome_d14,snap_serial,score,data=snap_mixedmod_long,show.marginal.means = T)
#violin plot for distribution of snap score over time
snap_mixedmod_long %>% mutate(snap_serial=factor(snap_serial)) %>% ggplot(aes(snap_serial,score))+
geom_violin()+
geom_jitter(alpha=0.5,width=0.1,height=0)
#main effect of time
snap_mixedmod_long %>%
ggplot(aes(snap_serial,score,group=1))+
stat_summary(fun.data = mean_cl_boot,geom="ribbon",alpha=0.3)+
stat_summary(fun.y=mean,geom="line")
#within ggplot argument, add group=1; for line graphs, the data points must be grouped so that it knows which points to connect. As all points should be connected, say group=1
#group x time interaction
snap_mixedmod_long %>% ggplot(aes(snap_serial,score,fill=outcome_d14,group=outcome_d14))+
stat_summary(fun.data = mean_se,geom="ribbon",alpha=0.2,color="lightgrey")+
stat_summary(fun.y=mean,geom="line")
#linear trends
snap_mixedmod_long %>% ggplot(aes(snap_serial,score,fill=outcome_d14,group=outcome_d14))+
#facet_wrap(~wga) +
geom_smooth(method = lm,alpha=0.2)
#quadratic trends
snap_mixedmod_long %>% ggplot(aes(snap_serial,score,group=outcome_d14))+
geom_smooth(method=lm,alpha=0.2,formula=y~x+I(x^2))
#groupXtimeXwga interaction
snap_mixedmod_long %>% ggplot(aes(snap_serial,score,group=outcome_d14))+
facet_wrap(~wga) +
stat_summary(fun.data = mean_se,alpha=1,position=position_dodge(width=0.5)) + stat_summary(fun=mean,geom="line",position=position_dodge(width=0.5))
library(ggplot2)
library(methods)
ggplot(snap_mixedmod_long,aes(snap_serial,score,group=1))+
geom_line() +
stat_smooth(aes(group=1)) +
stat_summary(aes(group=1),geom="point",fun.y=mean,shape=1,size=2)
library(ggplot2)
library(methods)
ggplot(snap_mixedmod_long,aes(snap_serial,score,group=1))+
geom_line()
library(ggplot2)
library(methods)
ggplot(snap_mixedmod_long,aes(snap_serial,score))+
geom_line()
library(ggplot2)
library(methods)
ggplot(snap_mixedmod_long,aes(snap_serial,score,group=1))+
geom_line()
#groupXtimeXwga interaction
snap_mixedmod_long %>% ggplot(aes(snap_serial,score,group=outcome_d14))+
stat_summary(fun.data = mean_se,alpha=1,position=position_dodge(width=0.5)) + stat_summary(fun=mean,geom="line",position=position_dodge(width=0.5))
#groupXtimeXwga interaction
snap_mixedmod_long %>% ggplot(aes(snap_serial,score,group=outcome_d14))+
stat_summary(fun.data = mean_se,alpha=1,position=position_dodge(width=0.5)) + stat_summary(fun=mean,geom="line",position=position_dodge(width=0.5)) +
ggtitle("Serial SNAP scores in mortality and no-mortality groups") +
xlab("Time")+ylab("SNAP  scores")
#groupXtimeXwga interaction
snap_mixedmod_long %>% ggplot(aes(snap_serial,score,group=outcome_d14))+
stat_summary(fun.data = mean_se,alpha=1,position=position_dodge(width=0.5)) + stat_summary(fun=mean,geom="line",position=position_dodge(width=0.5)) +
ggtitle("Serial SNAP scores in mortality and no-mortality groups") +
xlab("Time")+ylab("Mean SNAP  scores")
#groupXtimeXwga interaction
snap_mixedmod_long %>% ggplot(aes(snap_serial,score,group=outcome_d14))+
stat_summary(fun.data = mean_se,alpha=1,position=position_dodge(width=0.5)) + stat_summary(fun=mean,geom="line",position=position_dodge(width=0.5)) +
ggtitle("Serial SNAP scores in mortality and no-mortality groups") +
xlab("Time from severe sepsis")+ylab("Mean SNAP scores")
#groupXtimeXwga interaction
snap_mixedmod_long %>% ggplot(aes(snap_serial,score,group=outcome_d14))+
stat_summary(fun.data = mean_sdl,alpha=1,position=position_dodge(width=0.5)) + stat_summary(fun=mean,geom="line",position=position_dodge(width=0.5)) +
ggtitle("Serial SNAP scores in mortality and no-mortality groups") +
xlab("Time from severe sepsis")+ylab("Mean SNAP scores")
#groupXtimeXwga interaction
snap_mixedmod_long %>% ggplot(aes(snap_serial,score,group=outcome_d14))+
stat_summary(fun.data = mean_cl_boot,alpha=1,position=position_dodge(width=0.5)) + stat_summary(fun=mean,geom="line",position=position_dodge(width=0.5)) +
ggtitle("Serial SNAP scores in mortality and no-mortality groups") +
xlab("Time from severe sepsis")+ylab("Mean SNAP scores")
#groupXtimeXwga interaction
snap_mixedmod_long %>% ggplot(aes(snap_serial,score,group=outcome_d14))+
stat_summary(fun.data = mean_cl_boot,alpha=1,position=position_dodge(width=0.5)) + stat_summary(fun=mean,geom="line",position=position_dodge(width=0.5)) +
ggtitle("Serial SNAP scores in mortality and no-mortality groups") +
xlab("Time from severe sepsis")+ylab("Mean (95% C.I) SNAP scores")
#groupXtimeXwga interaction
snap_mixedmod_long %>% ggplot(aes(snap_serial,score,fill=outcome_d14,group=outcome_d14))+
stat_summary(fun.data = mean_cl_boot,alpha=1,position=position_dodge(width=0.5)) + stat_summary(fun=mean,geom="line",position=position_dodge(width=0.5)) +
ggtitle("Serial SNAP scores in mortality and no-mortality groups") +
xlab("Time from severe sepsis")+ylab("Mean (95% C.I) SNAP scores")
#groupXtimeXwga interaction
snap_mixedmod_long %>% ggplot(aes(snap_serial,score,fill=outcome_d14,shape=1,group=outcome_d14))+
stat_summary(fun.data = mean_cl_boot,alpha=1,position=position_dodge(width=0.5)) + stat_summary(fun=mean,geom="line",position=position_dodge(width=0.5)) +
ggtitle("Serial SNAP scores in mortality and no-mortality groups") +
xlab("Time from severe sepsis")+ylab("Mean (95% C.I) SNAP scores")
#groupXtimeXwga interaction
snap_mixedmod_long %>% ggplot(aes(snap_serial,score,fill=outcome_d14,group=outcome_d14))+
stat_summary(fun.data = mean_cl_boot,alpha=1,position=position_dodge(width=0.5)) + stat_summary(fun=mean,geom="line",position=position_dodge(width=0.5)) +
ggtitle("Serial SNAP scores in mortality and no-mortality groups") +
xlab("Time from severe sepsis")+ylab("Mean (95% C.I) SNAP scores")
#groupXtimeXwga interaction
snap_mixedmod_long %>% ggplot(aes(snap_serial,score,fill=outcome_d14,group=outcome_d14))+
stat_summary(fun.data = mean_cl_boot,alpha=1,position=position_dodge(width=0.5),show.legend=YES) + stat_summary(fun=mean,geom="line",position=position_dodge(width=0.5)) +
ggtitle("Serial SNAP scores in mortality and no-mortality groups") +
xlab("Time from severe sepsis")+ylab("Mean (95% C.I) SNAP scores")
#groupXtimeXwga interaction
snap_mixedmod_long %>% ggplot(aes(snap_serial,score,fill=outcome_d14,group=outcome_d14))+
stat_summary(fun.data = mean_cl_boot,alpha=1,position=position_dodge(width=0.5),show.legend=outcome_d14) + stat_summary(fun=mean,geom="line",position=position_dodge(width=0.5)) +
ggtitle("Serial SNAP scores in mortality and no-mortality groups") +
xlab("Time from severe sepsis")+ylab("Mean (95% C.I) SNAP scores")
#groupXtimeXwga interaction
snap_mixedmod_long %>% ggplot(aes(snap_serial,score,fill=outcome_d14,group=outcome_d14))+
stat_summary(fun.data = mean_cl_boot,alpha=1,position=position_dodge(width=0.5),show.legend="outcome_d14") + stat_summary(fun=mean,geom="line",position=position_dodge(width=0.5)) +
ggtitle("Serial SNAP scores in mortality and no-mortality groups") +
xlab("Time from severe sepsis")+ylab("Mean (95% C.I) SNAP scores")
#groupXtimeXwga interaction
snap_mixedmod_long %>% ggplot(aes(snap_serial,score,fill=outcome_d14,group=outcome_d14))+
stat_summary(fun.data = mean_cl_boot,alpha=1,position=position_dodge(width=0.5)) + stat_summary(fun=mean,geom="line",position=position_dodge(width=0.5)) +
ggtitle("Serial SNAP scores in mortality and no-mortality groups") +
xlab("Time from severe sepsis")+ylab("Mean (95% C.I) SNAP scores")
#groupXtimeXwga interaction
snap_mixedmod_long %>% ggplot(aes(snap_serial,score,fill=outcome_d14,group=outcome_d14))+
geom_point() +
stat_summary(fun.data = mean_cl_boot,alpha=1,position=position_dodge(width=0.5)) + stat_summary(fun=mean,geom="line",position=position_dodge(width=0.5)) +
ggtitle("Serial SNAP scores in mortality and no-mortality groups") +
xlab("Time from severe sepsis")+ylab("Mean (95% C.I) SNAP scores")
install.packages(c("tidyverse","fpp3","GGally","sinstall.packages(c("tidyverse","fpp3","GGally","sugrrants"))ugrrants"))
install.packages(c("tidyverse","fpp3","GGally","sugrrants"))
