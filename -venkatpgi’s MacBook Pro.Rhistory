dbl_names_snap <- snap %>% select_if(is.double) %>% colnames()
dbl_names_snap
dbl_to_fact_names_snap <- c("outcome_d14","seiz_0","seiz_24","seiz_48","seiz_72","od_enrol","od_d7","cvs_enrol","cvs_d7","rs_enrol","rs_d7","hemat_enrol","hemat_d7","renal_enrol","renal_d7","hepat_enrol","hepat_d7","cvs_d14","rs_d14","hemat_d14","renal_d14","hepat_d14")
snap[,dbl_to_fact_names_snap] <- lapply(snap[,dbl_to_fact_names_snap],factor)
for(i in colnames(snap)){
print(paste(i,"",class(snap[[i]])))
} #to check the change of selected doubles to factors (looped through columns)
dbl_names_baseline <- baseline_data %>% select_if(is.double) %>% colnames()
dbl_names_baseline
dbl_to_fact_names_baseline <- c("outcome_d14","outcome_d7","comp_outcome_d7","od_d7","outcome_d14_1","comp_outcome_d14","od_d14","outcome_final","gender","concep","booked","supvd","mat_drug","mat_ht","mat_dm","mat_pih","mat_gdm","mat_hd","lpv","ans","chorio","ipa","gest_categ","bwt_categ","mod","wga","birth_trauma","resp","surf","vent","oxygen","pda","chd","ivh","meningitis")
baseline_data[,dbl_to_fact_names_baseline] <- lapply(baseline_data[,dbl_to_fact_names_baseline],factor)
for(i in colnames(baseline_data)){
print(paste(i,"",class(baseline_data[[i]])))
} #to check the change of selected doubles to factors (looped through columns)
names(snap)
colnames(snap)
dim(snap)
dim(snap_long_na_rm)
table(snap$outcome_d14)
#code of levels in outcome_d14 variable needs recoding
#recoding using revalue() function of plyr() package
library(plyr)
snap$outcome_d14 <- revalue(snap$outcome_d14,c("1"="died","0"="survived"))
table(snap$outcome_d14)
library(readr)
library(here)
library(plyr)
library(tidyverse)
snap <- readr::read_csv("../data/snap_data.csv")
sepsis_data <- readr::read_csv("../data/sepsis_data.csv")
baseline_data <- readr::read_csv("../data/baseline_data.csv")
#code of levels in outcome_d14 variable needs recoding
#recoding using revalue() function of plyr() package
snap$outcome_d14 <- plyr::revalue(snap$outcome_d14,c("1"="died","0"="survived"))
#code of levels in outcome_d14 variable needs recoding
#recoding using revalue() function of plyr() package
snap$outcome_d14 <- revalue(snap$outcome_d14,c("1"="died","0"="survived"))
#code of levels in outcome_d14 variable needs recoding
#recoding using revalue() function of plyr() package
library(plyr)
snap$outcome_d14 <- revalue(snap$outcome_d14,c("1"="died","0"="survived"))
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(here)
library(plyr)
library(tidyverse)
snap <- readr::read_csv("../data/snap_data.csv")
sepsis_data <- readr::read_csv("../data/sepsis_data.csv")
baseline_data <- readr::read_csv("../data/baseline_data.csv")
#convert the wide data of snap to long data snap to make the data tidy data using the gather function of tidyverse::tidyr package
library(tidyr)
snap_long <- snap %>% gather(snap_rm,snap_value,snap_0:snap_72,factor_key=TRUE)
snap_long <- snap_long[order(snap_long$name,snap_long$snap_rm),]
snap_long
#another long data set without the missing data
snap_long_na_rm <- snap %>% gather(snap_rm,snap_value,snap_0:snap_72,factor_key=TRUE,na.rm=TRUE)
snap_long_na_rm <- snap_long_na_rm[order(snap_long_na_rm$name,snap_long_na_rm$snap_rm),]
snap_long_na_rm
library(dplyr)
colnames(sepsis_data)
for(i in colnames(sepsis_data)){
print(paste(i,"",typeof(sepsis_data[[i]])))
}
dbl_names_sepsis <- sepsis_data %>% select_if(is.double) %>% colnames()
dbl_names_sepsis
dbl_to_fact_names_sepsis <- c("outcome_d14","sepsis_type","lethargy","asp","temp","resp_dist","apnea","seiz","shock","sclerema","bleed","abd_dist","met_acid","tachy","cult_pos","org_type","sepsis_screen","cxr_abn","cvs_involv","cvs_instab","cvs_support","met_acid_refr","rs_involv","hypox","hypercapnia","coag_abn","neutro_low")
sepsis_data[,dbl_to_fact_names_sepsis] <- lapply(sepsis_data[,dbl_to_fact_names_sepsis],factor)
for(i in colnames(sepsis_data)){
print(paste(i,"",class(sepsis_data[[i]])))
} #to check the change of selected doubles to factors (looped through columns)
dbl_names_snap <- snap %>% select_if(is.double) %>% colnames()
dbl_names_snap
dbl_to_fact_names_snap <- c("outcome_d14","seiz_0","seiz_24","seiz_48","seiz_72","od_enrol","od_d7","cvs_enrol","cvs_d7","rs_enrol","rs_d7","hemat_enrol","hemat_d7","renal_enrol","renal_d7","hepat_enrol","hepat_d7","cvs_d14","rs_d14","hemat_d14","renal_d14","hepat_d14")
snap[,dbl_to_fact_names_snap] <- lapply(snap[,dbl_to_fact_names_snap],factor)
for(i in colnames(snap)){
print(paste(i,"",class(snap[[i]])))
} #to check the change of selected doubles to factors (looped through columns)
dbl_names_baseline <- baseline_data %>% select_if(is.double) %>% colnames()
dbl_names_baseline
dbl_to_fact_names_baseline <- c("outcome_d14","outcome_d7","comp_outcome_d7","od_d7","outcome_d14_1","comp_outcome_d14","od_d14","outcome_final","gender","concep","booked","supvd","mat_drug","mat_ht","mat_dm","mat_pih","mat_gdm","mat_hd","lpv","ans","chorio","ipa","gest_categ","bwt_categ","mod","wga","birth_trauma","resp","surf","vent","oxygen","pda","chd","ivh","meningitis")
baseline_data[,dbl_to_fact_names_baseline] <- lapply(baseline_data[,dbl_to_fact_names_baseline],factor)
for(i in colnames(baseline_data)){
print(paste(i,"",class(baseline_data[[i]])))
} #to check the change of selected doubles to factors (looped through columns)
#code of levels in outcome_d14 variable needs recoding
#recoding using revalue() function of plyr() package
library(plyr)
snap$outcome_d14 <- revalue(snap$outcome_d14,c("1"="died","0"="survived"))
table(snap$outcome_d14)
#code of levels in outcome_d14 variable needs recoding
#recoding using revalue() function of plyr() package
library(plyr)
snap$outcome_d14 <- revalue(snap$outcome_d14,c("1"="died","0"="survived"))
table(snap$outcome_d14)
#code of levels in outcome_d14 variable needs recoding
#recoding using revalue() function of plyr() package
library(plyr)
snap$outcome_d14 <- revalue(snap$outcome_d14,c("1"="died","0"="survived"))
table(snap$outcome_d14)
#code of levels in outcome_d14 variable needs recoding
#recoding using revalue() function of plyr() package
table(snap$outcome_d14)
levels(snap$outcome_d14)
snap <- snap %>% revalue(snap$outcome_d14,c("0"="1","1"="0"))
class(snap$outcome_d14)
snap$outcome_d14
snap <- snap %>% revalue(snap$outcome_d14,c("died"="survived","survived"="died"))
snap <- snap %>% revalue(snap$outcome_d14,c("died"="not_survived","survived"="died"))
library(plyr)
snap <- snap %>% revalue(snap$outcome_d14,c("died"="not_survived","survived"="died"))
levels(snap$outcome_d14)
table(snap$outcome_d14)
View(snap)
View(sepsis_data)
snap <- snap %>% revalue(outcome_d14,c("survived"="1","died"="0"))
library(plyr)
snap <- revalue(snap$outcome_d14,c("survived"="1","died"="0"))
snap
table(snap$outcome_d14)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(here)
library(plyr)
library(tidyverse)
snap <- readr::read_csv("../data/snap_data.csv")
sepsis_data <- readr::read_csv("../data/sepsis_data.csv")
baseline_data <- readr::read_csv("../data/baseline_data.csv")
#convert the wide data of snap to long data snap to make the data tidy data using the gather function of tidyverse::tidyr package
library(tidyr)
snap_long <- snap %>% gather(snap_rm,snap_value,snap_0:snap_72,factor_key=TRUE)
snap_long <- snap_long[order(snap_long$name,snap_long$snap_rm),]
snap_long
#another long data set without the missing data
snap_long_na_rm <- snap %>% gather(snap_rm,snap_value,snap_0:snap_72,factor_key=TRUE,na.rm=TRUE)
snap_long_na_rm <- snap_long_na_rm[order(snap_long_na_rm$name,snap_long_na_rm$snap_rm),]
snap_long_na_rm
library(dplyr)
colnames(sepsis_data)
for(i in colnames(sepsis_data)){
print(paste(i,"",typeof(sepsis_data[[i]])))
}
dbl_names_sepsis <- sepsis_data %>% select_if(is.double) %>% colnames()
dbl_names_sepsis
dbl_to_fact_names_sepsis <- c("outcome_d14","sepsis_type","lethargy","asp","temp","resp_dist","apnea","seiz","shock","sclerema","bleed","abd_dist","met_acid","tachy","cult_pos","org_type","sepsis_screen","cxr_abn","cvs_involv","cvs_instab","cvs_support","met_acid_refr","rs_involv","hypox","hypercapnia","coag_abn","neutro_low")
sepsis_data[,dbl_to_fact_names_sepsis] <- lapply(sepsis_data[,dbl_to_fact_names_sepsis],factor)
for(i in colnames(sepsis_data)){
print(paste(i,"",class(sepsis_data[[i]])))
} #to check the change of selected doubles to factors (looped through columns)
dbl_names_snap <- snap %>% select_if(is.double) %>% colnames()
dbl_names_snap
dbl_to_fact_names_snap <- c("outcome_d14","seiz_0","seiz_24","seiz_48","seiz_72","od_enrol","od_d7","cvs_enrol","cvs_d7","rs_enrol","rs_d7","hemat_enrol","hemat_d7","renal_enrol","renal_d7","hepat_enrol","hepat_d7","cvs_d14","rs_d14","hemat_d14","renal_d14","hepat_d14")
snap[,dbl_to_fact_names_snap] <- lapply(snap[,dbl_to_fact_names_snap],factor)
for(i in colnames(snap)){
print(paste(i,"",class(snap[[i]])))
} #to check the change of selected doubles to factors (looped through columns)
dbl_names_baseline <- baseline_data %>% select_if(is.double) %>% colnames()
dbl_names_baseline
dbl_to_fact_names_baseline <- c("outcome_d14","outcome_d7","comp_outcome_d7","od_d7","outcome_d14_1","comp_outcome_d14","od_d14","outcome_final","gender","concep","booked","supvd","mat_drug","mat_ht","mat_dm","mat_pih","mat_gdm","mat_hd","lpv","ans","chorio","ipa","gest_categ","bwt_categ","mod","wga","birth_trauma","resp","surf","vent","oxygen","pda","chd","ivh","meningitis")
baseline_data[,dbl_to_fact_names_baseline] <- lapply(baseline_data[,dbl_to_fact_names_baseline],factor)
for(i in colnames(baseline_data)){
print(paste(i,"",class(baseline_data[[i]])))
} #to check the change of selected doubles to factors (looped through columns)
table(snap$outcome_d14)
typeof(snap$outcome_d14)
class(snap$outcome_d14)
levels(snap$outcome_d14)
library(dplyr)
snap <- snap %>% mutate(outcome_d14=recode(outcome_d14,"0"="survived","1"=died))
table(snap$outcome_d14)
library(plyr)
snap$outcome_d14 <- revalue(snap$outcome_d14,c("0"="died","1"="survived"))
table(snap$outcome_d14)
snap
glimpse(snap)
snap$outcome_d14 <- revalue(snap$outcome_d14,c("died"="1","survived"="0"))
table(snap$outcome_d14)
snap(outcome_d14)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(here)
library(plyr)
library(tidyverse)
snap <- readr::read_csv("../data/snap_data.csv")
sepsis_data <- readr::read_csv("../data/sepsis_data.csv")
baseline_data <- readr::read_csv("../data/baseline_data.csv")
#convert the wide data of snap to long data snap to make the data tidy data using the gather function of tidyverse::tidyr package
library(tidyr)
snap_long <- snap %>% gather(snap_rm,snap_value,snap_0:snap_72,factor_key=TRUE)
snap_long <- snap_long[order(snap_long$name,snap_long$snap_rm),]
snap_long
#another long data set without the missing data
snap_long_na_rm <- snap %>% gather(snap_rm,snap_value,snap_0:snap_72,factor_key=TRUE,na.rm=TRUE)
snap_long_na_rm <- snap_long_na_rm[order(snap_long_na_rm$name,snap_long_na_rm$snap_rm),]
snap_long_na_rm
library(dplyr)
colnames(sepsis_data)
for(i in colnames(sepsis_data)){
print(paste(i,"",typeof(sepsis_data[[i]])))
}
dbl_names_sepsis <- sepsis_data %>% select_if(is.double) %>% colnames()
dbl_names_sepsis
dbl_to_fact_names_sepsis <- c("outcome_d14","sepsis_type","lethargy","asp","temp","resp_dist","apnea","seiz","shock","sclerema","bleed","abd_dist","met_acid","tachy","cult_pos","org_type","sepsis_screen","cxr_abn","cvs_involv","cvs_instab","cvs_support","met_acid_refr","rs_involv","hypox","hypercapnia","coag_abn","neutro_low")
sepsis_data[,dbl_to_fact_names_sepsis] <- lapply(sepsis_data[,dbl_to_fact_names_sepsis],factor)
for(i in colnames(sepsis_data)){
print(paste(i,"",class(sepsis_data[[i]])))
} #to check the change of selected doubles to factors (looped through columns)
dbl_names_snap <- snap %>% select_if(is.double) %>% colnames()
dbl_names_snap
dbl_to_fact_names_snap <- c("outcome_d14","seiz_0","seiz_24","seiz_48","seiz_72","od_enrol","od_d7","cvs_enrol","cvs_d7","rs_enrol","rs_d7","hemat_enrol","hemat_d7","renal_enrol","renal_d7","hepat_enrol","hepat_d7","cvs_d14","rs_d14","hemat_d14","renal_d14","hepat_d14")
snap[,dbl_to_fact_names_snap] <- lapply(snap[,dbl_to_fact_names_snap],factor)
for(i in colnames(snap)){
print(paste(i,"",class(snap[[i]])))
} #to check the change of selected doubles to factors (looped through columns)
dbl_names_baseline <- baseline_data %>% select_if(is.double) %>% colnames()
dbl_names_baseline
dbl_to_fact_names_baseline <- c("outcome_d14","outcome_d7","comp_outcome_d7","od_d7","outcome_d14_1","comp_outcome_d14","od_d14","outcome_final","gender","concep","booked","supvd","mat_drug","mat_ht","mat_dm","mat_pih","mat_gdm","mat_hd","lpv","ans","chorio","ipa","gest_categ","bwt_categ","mod","wga","birth_trauma","resp","surf","vent","oxygen","pda","chd","ivh","meningitis")
baseline_data[,dbl_to_fact_names_baseline] <- lapply(baseline_data[,dbl_to_fact_names_baseline],factor)
for(i in colnames(baseline_data)){
print(paste(i,"",class(baseline_data[[i]])))
} #to check the change of selected doubles to factors (looped through columns)
snap(outcome_d14)
snap
table(snap$outcome_d14)
#have to recode outcome_d14 variable in snap data
library(plyr)
snap$outcome_d14 <- revalue(snap$outcome_d14,c("0"="died","1"="survived"))
snap$outcome_d14 <- revalue(snap$outcome_d14,c("died"="1","survived"="0"))
table(snap$outcome_d14)
knitr::opts_chunk$set(echo = TRUE)
library(pROC)
roc1 <- roc(snap$outcome_d14, snap$snap_0, percent=TRUE,
# arguments for auc
partial.auc=c(100, 90), partial.auc.correct=TRUE,
partial.auc.focus="sens",
# arguments for ci
ci=TRUE, boot.n=100, ci.alpha=0.9, stratified=FALSE,
# arguments for plot
plot=TRUE, auc.polygon=TRUE, max.auc.polygon=TRUE, grid=TRUE,
print.auc=TRUE, show.thres=TRUE))
library(pROC)
roc1 <- roc(snap$outcome_d14, snap$snap_0, percent=TRUE,
# arguments for auc
partial.auc=c(100, 90), partial.auc.correct=TRUE,
partial.auc.focus="sens",
# arguments for ci
ci=TRUE, boot.n=100, ci.alpha=0.9, stratified=FALSE,
# arguments for plot
plot=TRUE, auc.polygon=TRUE, max.auc.polygon=TRUE, grid=TRUE,
print.auc=TRUE, show.thres=TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(here)
library(plyr)
library(tidyverse)
snap <- readr::read_csv("../data/snap_data.csv")
sepsis_data <- readr::read_csv("../data/sepsis_data.csv")
baseline_data <- readr::read_csv("../data/baseline_data.csv")
#convert the wide data of snap to long data snap to make the data tidy data using the gather function of tidyverse::tidyr package
library(tidyr)
snap_long <- snap %>% gather(snap_rm,snap_value,snap_0:snap_72,factor_key=TRUE)
snap_long <- snap_long[order(snap_long$name,snap_long$snap_rm),]
snap_long
#another long data set without the missing data
snap_long_na_rm <- snap %>% gather(snap_rm,snap_value,snap_0:snap_72,factor_key=TRUE,na.rm=TRUE)
snap_long_na_rm <- snap_long_na_rm[order(snap_long_na_rm$name,snap_long_na_rm$snap_rm),]
snap_long_na_rm
library(dplyr)
colnames(sepsis_data)
for(i in colnames(sepsis_data)){
print(paste(i,"",typeof(sepsis_data[[i]])))
}
dbl_names_sepsis <- sepsis_data %>% select_if(is.double) %>% colnames()
dbl_names_sepsis
dbl_to_fact_names_sepsis <- c("outcome_d14","sepsis_type","lethargy","asp","temp","resp_dist","apnea","seiz","shock","sclerema","bleed","abd_dist","met_acid","tachy","cult_pos","org_type","sepsis_screen","cxr_abn","cvs_involv","cvs_instab","cvs_support","met_acid_refr","rs_involv","hypox","hypercapnia","coag_abn","neutro_low")
sepsis_data[,dbl_to_fact_names_sepsis] <- lapply(sepsis_data[,dbl_to_fact_names_sepsis],factor)
for(i in colnames(sepsis_data)){
print(paste(i,"",class(sepsis_data[[i]])))
} #to check the change of selected doubles to factors (looped through columns)
dbl_names_snap <- snap %>% select_if(is.double) %>% colnames()
dbl_names_snap
dbl_to_fact_names_snap <- c("outcome_d14","seiz_0","seiz_24","seiz_48","seiz_72","od_enrol","od_d7","cvs_enrol","cvs_d7","rs_enrol","rs_d7","hemat_enrol","hemat_d7","renal_enrol","renal_d7","hepat_enrol","hepat_d7","cvs_d14","rs_d14","hemat_d14","renal_d14","hepat_d14")
snap[,dbl_to_fact_names_snap] <- lapply(snap[,dbl_to_fact_names_snap],factor)
for(i in colnames(snap)){
print(paste(i,"",class(snap[[i]])))
} #to check the change of selected doubles to factors (looped through columns)
dbl_names_baseline <- baseline_data %>% select_if(is.double) %>% colnames()
dbl_names_baseline
dbl_to_fact_names_baseline <- c("outcome_d14","outcome_d7","comp_outcome_d7","od_d7","outcome_d14_1","comp_outcome_d14","od_d14","outcome_final","gender","concep","booked","supvd","mat_drug","mat_ht","mat_dm","mat_pih","mat_gdm","mat_hd","lpv","ans","chorio","ipa","gest_categ","bwt_categ","mod","wga","birth_trauma","resp","surf","vent","oxygen","pda","chd","ivh","meningitis")
baseline_data[,dbl_to_fact_names_baseline] <- lapply(baseline_data[,dbl_to_fact_names_baseline],factor)
for(i in colnames(baseline_data)){
print(paste(i,"",class(baseline_data[[i]])))
} #to check the change of selected doubles to factors (looped through columns)
#have to recode outcome_d14 variable in snap data
library(plyr)
snap$outcome_d14 <- revalue(snap$outcome_d14,c("0"="died","1"="survived"))
snap$outcome_d14 <- revalue(snap$outcome_d14,c("died"="1","survived"="0"))
table(snap$outcome_d14)
library(pROC)
roc1 <- roc(snap$outcome_d14, snap$snap_0, percent=TRUE,
# arguments for auc
partial.auc=c(100, 90), partial.auc.correct=TRUE,
partial.auc.focus="sens",
# arguments for ci
ci=TRUE, boot.n=100, ci.alpha=0.9, stratified=FALSE,
# arguments for plot
plot=TRUE, auc.polygon=TRUE, max.auc.polygon=TRUE, grid=TRUE,
print.auc=TRUE, show.thres=TRUE)
library(pROC)
roc1 <- roc(snap$outcome_d14, snap$snap_0, percent=TRUE,
# arguments for auc
partial.auc=c(100, 90), partial.auc.correct=TRUE,
partial.auc.focus="sens",
# arguments for ci
ci=TRUE, boot.n=100, ci.alpha=0.9, stratified=FALSE,
# arguments for plot
plot=TRUE, auc.polygon=TRUE, max.auc.polygon=TRUE, grid=TRUE,
print.auc=TRUE, show.thres=TRUE)
# Add to an existing plot. Beware of 'percent' specification!
roc2 <- roc(aSAH$outcome, aSAH$wfns,
plot=TRUE, add=TRUE, percent=roc1$percent)
library(pROC)
roc1 <- roc(snap$outcome_d14, snap$snap_0, percent=TRUE,
# arguments for auc
partial.auc=c(100, 90), partial.auc.correct=TRUE,
partial.auc.focus="sens",
# arguments for ci
ci=TRUE, boot.n=100, ci.alpha=0.9, stratified=FALSE,
# arguments for plot
plot=TRUE, auc.polygon=TRUE, max.auc.polygon=TRUE, grid=TRUE,
print.auc=TRUE, show.thres=TRUE)
# Add to an existing plot. Beware of 'percent' specification!
roc2 <- roc(snap$outcome_d14,snap$snap_0_72,
plot=TRUE, add=TRUE, percent=roc1$percent)
library(pROC)
roc1 <- roc(snap$outcome_d14, snap$snap_0, percent=TRUE,
# arguments for auc
partial.auc=c(100, 90), partial.auc.correct=TRUE,
partial.auc.focus="sens",
# arguments for ci
ci=TRUE, boot.n=100, ci.alpha=0.9, stratified=FALSE,
# arguments for plot
plot=TRUE, auc.polygon=TRUE, max.auc.polygon=TRUE, grid=TRUE,
print.auc=TRUE, show.thres=TRUE)
# Add to an existing plot. Beware of 'percent' specification!
roc2 <- roc(snap$outcome_d14,snap$snap_0_72,
plot=TRUE, add=TRUE, percent=roc1$percent)
#coordinates of the curve
coords(roc1, "best", ret=c("threshold", "specificity", "1-npv"))
coords(roc2, "local maximas", ret=c("threshold", "sens", "spec", "ppv", "npv"))
library(pROC)
roc1 <- roc(snap$outcome_d14, snap$snap_0, percent=TRUE,
# arguments for auc
partial.auc=c(100, 90), partial.auc.correct=TRUE,
partial.auc.focus="sens",
# arguments for ci
ci=TRUE, boot.n=100, ci.alpha=0.9, stratified=FALSE,
# arguments for plot
plot=TRUE, auc.polygon=TRUE, max.auc.polygon=TRUE, grid=TRUE,
print.auc=TRUE, show.thres=TRUE)
# Add to an existing plot. Beware of 'percent' specification!
roc2 <- roc(snap$outcome_d14,snap$snap_0_72,
plot=TRUE, add=TRUE, percent=roc1$percent)
#coordinates of the curve
coords(roc1, "best", ret=c("threshold", "specificity", "1-npv"))
coords(roc2, "local maximas", ret=c("threshold", "sens", "spec", "ppv", "npv"))
#confidence intervals
# Of the AUC
ci(roc2)
# Of the curve
sens.ci <- ci.se(roc1, specificities=seq(0, 100, 5))
plot(sens.ci, type="shape", col="lightblue")
plot(sens.ci, type="bars")
# need to re-add roc2 over the shape
plot(roc2, add=TRUE)
# CI of thresholds
plot(ci.thresholds(roc2))
library(pROC)
roc1 <- roc(snap$outcome_d14, snap$snap_0, percent=TRUE,
# arguments for auc
partial.auc=c(100, 90), partial.auc.correct=TRUE,
partial.auc.focus="sens",
# arguments for ci
ci=TRUE, boot.n=100, ci.alpha=0.9, stratified=FALSE,
# arguments for plot
plot=TRUE, auc.polygon=TRUE, max.auc.polygon=TRUE, grid=TRUE,
print.auc=TRUE, show.thres=TRUE)
# Add to an existing plot. Beware of 'percent' specification!
roc2 <- roc(snap$outcome_d14,snap$snap_0_72,
plot=TRUE, add=TRUE, percent=roc1$percent)
#coordinates of the curve
coords(roc1, "best", ret=c("threshold", "specificity", "1-npv"))
coords(roc2, "local maximas", ret=c("threshold", "sens", "spec", "ppv", "npv"))
#confidence intervals
# Of the AUC
ci(roc2)
# Of the curve
sens.ci <- ci.se(roc1, specificities=seq(0, 100, 5))
plot(sens.ci, type="shape", col="lightblue")
plot(sens.ci, type="bars")
# need to re-add roc2 over the shape
plot(roc2, add=TRUE)
# CI of thresholds
plot(ci.thresholds(roc2))
#comparisons
# Test on the whole AUC
roc.test(roc1, roc2, reuse.auc=FALSE)
# Test on a portion of the whole AUC
roc.test(roc1, roc2, reuse.auc=FALSE, partial.auc=c(100, 90),
partial.auc.focus="se", partial.auc.correct=TRUE)
# With modified bootstrap parameters
roc.test(roc1, roc2, reuse.auc=FALSE, partial.auc=c(100, 90),
partial.auc.correct=TRUE, boot.n=1000, boot.stratified=FALSE)
names(snap)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(here)
library(plyr)
library(tidyverse)
snap <- readr::read_csv("../data/snap_data.csv")
sepsis_data <- readr::read_csv("../data/sepsis_data.csv")
baseline_data <- readr::read_csv("../data/baseline_data.csv")
#convert the wide data of snap to long data snap to make the data tidy data using the gather function of tidyverse::tidyr package
library(tidyr)
snap_long <- snap %>% gather(snap_rm,snap_value,snap_0:snap_72,factor_key=TRUE)
snap_long <- snap_long[order(snap_long$name,snap_long$snap_rm),]
snap_long
#another long data set without the missing data
snap_long_na_rm <- snap %>% gather(snap_rm,snap_value,snap_0:snap_72,factor_key=TRUE,na.rm=TRUE)
snap_long_na_rm <- snap_long_na_rm[order(snap_long_na_rm$name,snap_long_na_rm$snap_rm),]
snap_long_na_rm
library(dplyr)
colnames(sepsis_data)
for(i in colnames(sepsis_data)){
print(paste(i,"",typeof(sepsis_data[[i]])))
}
dbl_names_sepsis <- sepsis_data %>% select_if(is.double) %>% colnames()
dbl_names_sepsis
dbl_to_fact_names_sepsis <- c("outcome_d14","sepsis_type","lethargy","asp","temp","resp_dist","apnea","seiz","shock","sclerema","bleed","abd_dist","met_acid","tachy","cult_pos","org_type","sepsis_screen","cxr_abn","cvs_involv","cvs_instab","cvs_support","met_acid_refr","rs_involv","hypox","hypercapnia","coag_abn","neutro_low")
sepsis_data[,dbl_to_fact_names_sepsis] <- lapply(sepsis_data[,dbl_to_fact_names_sepsis],factor)
for(i in colnames(sepsis_data)){
print(paste(i,"",class(sepsis_data[[i]])))
} #to check the change of selected doubles to factors (looped through columns)
dbl_names_snap <- snap %>% select_if(is.double) %>% colnames()
dbl_names_snap
dbl_to_fact_names_snap <- c("outcome_d14","seiz_0","seiz_24","seiz_48","seiz_72","od_enrol","od_d7","cvs_enrol","cvs_d7","rs_enrol","rs_d7","hemat_enrol","hemat_d7","renal_enrol","renal_d7","hepat_enrol","hepat_d7","cvs_d14","rs_d14","hemat_d14","renal_d14","hepat_d14")
snap[,dbl_to_fact_names_snap] <- lapply(snap[,dbl_to_fact_names_snap],factor)
for(i in colnames(snap)){
print(paste(i,"",class(snap[[i]])))
} #to check the change of selected doubles to factors (looped through columns)
dbl_names_baseline <- baseline_data %>% select_if(is.double) %>% colnames()
dbl_names_baseline
dbl_to_fact_names_baseline <- c("outcome_d14","outcome_d7","comp_outcome_d7","od_d7","outcome_d14_1","comp_outcome_d14","od_d14","outcome_final","gender","concep","booked","supvd","mat_drug","mat_ht","mat_dm","mat_pih","mat_gdm","mat_hd","lpv","ans","chorio","ipa","gest_categ","bwt_categ","mod","wga","birth_trauma","resp","surf","vent","oxygen","pda","chd","ivh","meningitis")
baseline_data[,dbl_to_fact_names_baseline] <- lapply(baseline_data[,dbl_to_fact_names_baseline],factor)
for(i in colnames(baseline_data)){
print(paste(i,"",class(baseline_data[[i]])))
} #to check the change of selected doubles to factors (looped through columns)
#have to recode outcome_d14 variable in snap data
library(plyr)
snap$outcome_d14 <- revalue(snap$outcome_d14,c("0"="died","1"="survived"))
snap$outcome_d14 <- revalue(snap$outcome_d14,c("died"="1","survived"="0"))
table(snap$outcome_d14)
library(pROC)
roc1 <- roc(snap$outcome_d14, snap$snap_0, percent=TRUE,
# arguments for auc
partial.auc=c(100, 90), partial.auc.correct=TRUE,
partial.auc.focus="sens",
# arguments for ci
ci=TRUE, boot.n=100, ci.alpha=0.9, stratified=FALSE,
# arguments for plot
plot=TRUE, auc.polygon=TRUE, max.auc.polygon=TRUE, grid=TRUE,
print.auc=TRUE, show.thres=TRUE)
# Add to an existing plot. Beware of 'percent' specification!
roc2 <- roc(snap$outcome_d14,snap$snap_0_72,
plot=TRUE, add=TRUE, percent=roc1$percent)
#coordinates of the curve
coords(roc1, "best", ret=c("threshold", "specificity", "1-npv"))
coords(roc2, "local maximas", ret=c("threshold", "sens", "spec", "ppv", "npv"))
#confidence intervals
# Of the AUC
ci(roc2)
# Of the curve
sens.ci <- ci.se(roc1, specificities=seq(0, 100, 5))
plot(sens.ci, type="shape", col="lightblue")
plot(sens.ci, type="bars")
# need to re-add roc2 over the shape
plot(roc2, add=TRUE)
# CI of thresholds
plot(ci.thresholds(roc2))
#comparisons
# Test on the whole AUC
roc.test(roc1, roc2, reuse.auc=FALSE)
# Test on a portion of the whole AUC
roc.test(roc1, roc2, reuse.auc=FALSE, partial.auc=c(100, 90),
partial.auc.focus="se", partial.auc.correct=TRUE)
# With modified bootstrap parameters
roc.test(roc1, roc2, reuse.auc=FALSE, partial.auc=c(100, 90),
partial.auc.correct=TRUE, boot.n=1000, boot.stratified=FALSE)
calcite_tib <- readr::read_csv("../data/ais_15_calcite.csv")
id <- c(1:20)
actual <- c(12,5,10,7,12,5,10,13,3,5,9,6,18,12,2,11,9,12,12,11)
different <- c(6,10,5,4,5,8,6,10,8,8,8,10,8,5,8,5,5,7,4,7)
calcite_tib <- data_frame(id,actual,different)
calcite_tib
calcite_tib_2 <- readr::read_csv("http://www.discoveringstatistics.com/repository/ais_data/ais_15_calcite.csv")
calcite_tib_2
glimpse(calcite_tib_2)
tidyr::gather(calcite_tib_2)
tidy_not_good <- tidyr::gather(calcite_tib)
View(tidy_not_good)
tidyr::gather(calcite_tib,key="face_type",value="recog_score",-id)
bb
names(snap)
